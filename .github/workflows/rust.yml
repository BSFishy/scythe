name: Rust

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths: [ '**/Cargo.toml', '**.rs' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ '**/Cargo.toml', '**.rs' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        platform: [ ubuntu-latest, macos-latest, windows-latest ]
        toolchain: [ stable, nightly ]
        type: [ debug, release ]
        release:
          - ${{ contains(github.ref, 'main') }}
        exclude:
          - type: debug
            release: true
          - type: release
            release: false
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - name: Set release flag
        if: github.ref == 'refs/heads/main'
        run: echo "RELEASE_FLAG=--release" >> $GITHUB_ENV
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Cargo cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}-${{ matrix.type }}-${{ hashFiles('**/Cargo.toml') }}
      - name: Build
        run: cargo build ${{ env.RELEASE_FLAG }} --workspace --verbose
      - name: Test
        run: cargo test ${{ env.RELEASE_FLAG }} --workspace --verbose
      - name: Check
        run: cargo check ${{ env.RELEASE_FLAG }} --workspace --verbose
      - name: Clippy
        uses: actions-rs/clippy-check@v1.0.7
        if: matrix.platform == 'ubuntu-latest' && matrix.toolchain == 'stable'
        with:
          toolchain: ${{ matrix.toolchain }}
          token: ${{ secrets.GITHUB_TOKEN }}
          args: ${{ env.RELEASE_FLAG }} --workspace --all-features
      - name: Install Cargo cache
        uses: actions-rs/install@v0.1
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          crate: cargo-cache
      - name: Cleanup cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo cache -a
      - name: Cleanup windows cache
        if: steps.cache.outputs.cache-hit != 'true' && matrix.platform == 'windows-latest'
        shell: bash
        run: |
          rm -rf ~/.cargo/git/checkouts
          rm -rf ~/.cargo/registry/index
